import { Keypair, SystemProgram, Transaction } from "@solana/web3.js";
import bs58 from "bs58";
import { randomBytes } from "node:crypto";
import { Base64 } from "../base-types";
import { GlowBorshTypes } from "../borsh/GlowBorshTypes";
import { GPublicKey } from "../GPublicKey";
import { GTransaction } from "../GTransaction";

const TXS_BASE64: Base64[] = [
  "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",
];

describe("GTransaction", () => {
  test("compare to web3.js", () => {
    for (const txBase64 of TXS_BASE64) {
      const txBuffer = Buffer.from(txBase64, "base64");

      const transaction = Transaction.from(txBuffer);
      const gTransaction = GTransaction.parse({ buffer: txBuffer });

      expect(
        transaction.signatures.map((sig) => ({
          signature: bs58.encode(sig.signature!),
          address: sig.publicKey.toBase58(),
        }))
      ).toEqual(gTransaction.signatures);

      const message = transaction.compileMessage();
      expect(
        message.accountKeys.map((publicKey, idx) => ({
          address: publicKey.toBase58(),
          signer: message.isAccountSigner(idx),
          writable: message.isAccountWritable(idx),
        }))
      ).toEqual(gTransaction.accounts);
      expect(transaction.recentBlockhash).toEqual(gTransaction.recentBlockhash);
      expect(
        transaction.instructions.map((inst) => ({
          program: inst.programId.toBase58(),
          accounts: inst.keys.map((k) => k.pubkey.toBase58()),
          data_base64: inst.data.toString("base64"),
        }))
      ).toEqual(gTransaction.instructions);
    }
  });

  test("serializing", () => {
    for (const txBase64 of TXS_BASE64) {
      const originalTxBuffer = Buffer.from(txBase64, "base64");
      const reshuffledTx = Transaction.from(originalTxBuffer);
      const reshuffledTxBuffer = reshuffledTx.serialize({
        requireAllSignatures: false,
        verifySignatures: false,
      });
      const reshuffledGTx = GTransaction.parse({
        buffer: reshuffledTxBuffer,
      });
      const reshuffledGTxBuffer = GTransaction.toBuffer({
        gtransaction: reshuffledGTx,
      });

      expect(reshuffledGTxBuffer).toEqual(reshuffledTxBuffer);
      expect(
        GTransaction.parse({
          buffer: reshuffledGTxBuffer,
        })
      ).toEqual(
        GTransaction.parse({
          buffer: reshuffledTxBuffer,
        })
      );
    }
  });

  test("resigning", () => {
    for (const txBase64 of TXS_BASE64) {
      const originalTxBuffer = Buffer.from(txBase64, "base64");
      const reshuffledTx = Transaction.from(originalTxBuffer);
      // Work around reshuffling bug by embracing it - parsing reshuffled transaction
      const reshuffledGTx = GTransaction.parse({
        buffer: reshuffledTx.serialize({
          requireAllSignatures: false,
          verifySignatures: false,
        }),
      });

      const testPublicKey = reshuffledTx.signatures[0].publicKey;
      const testSignature = randomBytes(GlowBorshTypes.signature.byteSize);
      // Change signature of one of the signers to a random buffer
      reshuffledTx.addSignature(testPublicKey, testSignature);
      const signedReshuffledGTx = GTransaction.addSignature({
        gtransaction: reshuffledGTx,
        signature: testSignature,
        address: testPublicKey.toBase58(),
      });

      const signedReshuffledSignedTxBuffer = reshuffledTx.serialize({
        requireAllSignatures: false,
        verifySignatures: false,
      });
      const signedReshuffledSignedGTxBuffer = GTransaction.toBuffer({
        gtransaction: signedReshuffledGTx,
      });

      // Verify that serialized transaction and gTransaction match
      if (
        !signedReshuffledSignedTxBuffer.equals(signedReshuffledSignedGTxBuffer)
      ) {
        // If buffers were different, it will be easier to debug the difference
        // on parsed representations
        expect(
          GTransaction.parse({
            buffer: signedReshuffledSignedGTxBuffer,
          })
        ).toEqual(
          GTransaction.parse({
            buffer: signedReshuffledSignedTxBuffer,
          })
        );
        expect(signedReshuffledSignedTxBuffer).toEqual(
          signedReshuffledSignedGTxBuffer
        );
      }
    }
  });

  test("addSignature", async () => {
    // Prepare a simple transfer transaction
    const from = Keypair.generate();
    const to = Keypair.generate();
    const transaction = new Transaction({
      feePayer: from.publicKey,
      recentBlockhash: GPublicKey.default.toBase58(),
    });
    transaction.add(
      SystemProgram.transfer({
        fromPubkey: from.publicKey,
        toPubkey: to.publicKey,
        lamports: 5_000 * 1.5,
      })
    );
    const transactionBuffer = transaction.serialize({
      requireAllSignatures: false,
    });

    let gTransaction = GTransaction.parse({
      buffer: transactionBuffer,
    });

    // Sanity check - verify that serialized versions are equal
    expect(transactionBuffer).toEqual(
      GTransaction.toBuffer({ gtransaction: gTransaction })
    );

    // Add a new signature
    transaction.partialSign(from);
    gTransaction = GTransaction.addSignature({
      gtransaction: gTransaction,
      address: from.publicKey.toBase58(),
      signature: transaction.signature!,
    });

    // Verify that serialized transactions with more signatures are equal too
    expect(transaction.serialize()).toEqual(
      GTransaction.toBuffer({ gtransaction: gTransaction })
    );
  });

  test("addSignature", async () => {
    // Prepare a simple transfer transaction
    const from = Keypair.generate();
    const to = Keypair.generate();
    const transaction = new Transaction({
      feePayer: from.publicKey,
      recentBlockhash: GPublicKey.default.toBase58(),
    });
    transaction.add(
      SystemProgram.transfer({
        fromPubkey: from.publicKey,
        toPubkey: to.publicKey,
        lamports: 5_000 * 1.5,
      })
    );
    const transactionBuffer = transaction.serialize({
      requireAllSignatures: false,
    });

    let gTransaction = GTransaction.parse({
      buffer: transactionBuffer,
    });

    // Sanity check - verify that serialized versions are equal
    expect(transactionBuffer).toEqual(
      GTransaction.toBuffer({ gtransaction: gTransaction })
    );

    // Add a new signature
    transaction.partialSign(from);
    gTransaction = GTransaction.sign({
      gtransaction: gTransaction,
      secretKey: from.secretKey,
    });

    // Verify that serialized transactions with more signatures are equal too
    expect(transaction.serialize()).toEqual(
      GTransaction.toBuffer({ gtransaction: gTransaction })
    );
  });
});
